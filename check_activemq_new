#!/usr/bin/perl
# http://it.toolbox.com/blogs/unix-sysadmin/monitoring-activemq-from-nagios-27743
# modified by brad clark 2/28/2012
# bclark@plumchoice.com

use strict;
use Net::Stomp;

my $time=time;
#my @hosts=qw /172.16.166.101 172.16.166.102/;
my $host=$ARGV[0];
my $login='client';
my $pass='mypass';
#my $queue='/queue/nagiosTestQueue';
my $queue='/queue/aaaaaaTestQueue';
my %error=('ok'=>0,'warning'=>1,'critical'=>2);
my ($exitcode, $evalcount);

# Tryout each broker in the @hosts array
#foreach ( @hosts ) {
#    eval {
        # Connect to the broker.
        my $stomp = Net::Stomp->new(
            { hostname => "$host",
              port     => '61613',
		timeout => "5"
            }
        );

	$stomp->connect();

        # Send test message containing $time timestamp.
        $stomp->send( 
            { destination => "$queue",
              body        => "$time"
            }
        );

	$stomp->disconnect;

	#sleep(10);
       
        # Connect to the broker.
        my $stompRead = Net::Stomp->new(
            { hostname => "$host",
              port     => '61613',
		timeout => "5"
            }
        );

	$stompRead->connect();
        # Subscribe to messages from the $queue.
        $stompRead->subscribe(
            { destination             => "$queue",
              'ack'                   => 'client',
              'activemq.prefetchSize' => 1
            }
        );

        # Wait max 5 seconds for message to appear.
        my $can_read = $stompRead->can_read({ timeout => "5" });
        my $tries = 2;
	while($tries--){
        if ( $can_read ) {
            # There is a message to collect.
            my $frame = $stompRead->receive_frame;
            $stompRead->ack( { frame => $frame } );
            my $framebody=$frame->body;

            if ( $framebody eq "$time" ) {
                print "OK: Message received\n";
                $exitcode="ok";
		$tries = 0;
            }
            else {
                print "WARNING: Incorrect message body; is $framebody, should be $time\n";
                $exitcode="warning";
            }
        }
        else {
            # There's still to message to collect.
            print "CRITICAL: Timed out while trying to collect the message\n";
            $exitcode="critical";
        }
	}
        # Whatever the outcome, we have managed to connect to given broker.
        # There's no need to try the other.
        $stompRead->disconnect;
        exit $error{"$exitcode"};
#    };
    # $@ contains error message from eval() which means the execution
    # of eval() block did not succeed.
#    ++$evalcount if $@;
#}

print "CRITICAL: No connection to ActiveMQ\n";
exit $error{"critical"};
