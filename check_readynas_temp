#!/bin/bash

##
#
# receive statusinfo from Netgear ReadyNAS 2100 for Nagios
#
# you can get all snmp-options with:
#   snmpwalk -m ALL -v 2c -c MYCOMMUNITY MYIPADDRESS  .1.3.6.1.4.1.4526
#
#
# Usage: 
#  ./check_readynas IP-ADDRESS SNMP-COMMUNITY STATUSCHECK
#
#
# 2010-07-19: initial Version     \\ Jan Toenjes <jtoenje@uni-goettingen.de>
#
##


# temperature values for warning or critical / hdd (from datasheet)
MAXDISKTEMPCRIT="140"
MINDISKTEMPCRIT="41"
MAXDISKTEMPWARN="122"
MINDISKTEMPWARN="59"

# unused systemtemperature values for warning or critical / (from webinterface)
MAXSYSTEMPCRIT="176"
MINSYSTEMPCRIT="32"
MAXSYSTEMPWARN="160"
MINSYSTEMPWARN="40"

# unused systemtemperature values for warning or critical / (from webinterface)
MAXSYSTEMPCRIT="149"
MINSYSTEMPCRIT="32"
MAXSYSTEMPWARN="130"
MINSYSTEMPWARN="40"


# nagios return values
export STATE_OK=0
export STATE_WARNING=1
export STATE_CRITICAL=2
export STATE_UNKNOWN=3  
export STATE_DEPENDENT=4
                                        

# check disk temperature for warning or critical values
function checkDiskTemperature () {

	true=$(echo "$1 >= $MAXDISKTEMPWARN" | bc)
		if [ $true = 1 ] ; then
			returnValue=$STATE_WARNING ;
		fi
		
	true=$(echo "$1 >= $MAXDISKTEMPCRIT" | bc)
		if [ $true = 1 ] ; then
			returnValue=$STATE_CRITICAL ;
		fi
		
	true=$(echo "$1 <= $MINDISKTEMPWARN" | bc)
		if [ $true = 1 ] ; then
			returnValue=$STATE_WARNING ;
		fi
		  
	true=$(echo "$1 <= $MINDISKTEMPCRIT" | bc)
		if [ $true = 1 ] ; then
			returnValue=$STATE_CRITICAL ;
		fi
	return $returnValue
}


# check third parameter and return the information
case "$3" in

	disk1)
		DSK1TEMP=`snmpget $1 -v2c -c $2 enterprises.4526.18.3.1.5.1 | awk '{print $4}'`
		checkDiskTemperature $DSK1TEMP
		intReturn=$?
		outMessage="Disk1: $DSK1TEMP°F | 'Disk1 °F'=$DSK1TEMP;122;140" ;
	;;


	disk2)
		DSK2TEMP=`snmpget $1 -v2c -c $2 enterprises.4526.18.3.1.5.2 | awk '{print $4}'`
                checkDiskTemperature $DSK2TEMP
		intReturn=$?
		outMessage="Disk2: $DSK2TEMP°F | 'Disk2 °F'=$DSK2TEMP;122;140" ;
	;;


	disk3)
		DSK3TEMP=`snmpget $1 -v2c -c $2 enterprises.4526.18.3.1.5.3 | awk '{print $4}'`
		DSK3CEL=`echo "scale=2;(5/9)*($DSK3TEMP-32)"|bc`

                checkDiskTemperature $DSK3TEMP
		intReturn=$?
		outMessage="Disk3: $DSK3TEMP°F | 'Disk3 °F'=$DSK3TEMP;122;140" ;
	;;


	disk4)
		DSK4TEMP=`snmpget $1 -v2c -c $2 enterprises.4526.18.3.1.5.4 | awk '{print $4}'`
		DSK4CEL=`echo "scale=2;(5/9)*($DSK4TEMP-32)"|bc`

                checkDiskTemperature $DSK4TEMP
		intReturn=$?
		outMessage="Disk4: $DSK4TEMP°F | 'Disk4 °F'=$DSK4TEMP;122;140" ;
	;;	

        proc)
		PROCTEMP=`snmpget $1 -v2c -c $2 enterprises.4526.18.5.1.2.1 | awk '{print $4}'`
		PROCTEMPOK=`snmpget $1 -v2c -c $2 enterprises.4526.18.5.1.3.1 | sed 's/.*ING: "//g' | sed 's/"//g'`
		if [ $PROCTEMPOK == "ok" ]; then
		  intReturn=$STATE_OK
		else
		  intReturn=$STATE_WARNING
		fi	
		outMessage="$PROCTEMPOK: $PROCTEMP°F | 'Processor °F'=$PROCTEMP;160;176"
	;;	

        sys)
		SYSTEMP=`snmpget $1 -v2c -c $2 enterprises.4526.18.5.1.2.2 | awk '{print $4}'`
		SYSTEMPOK=`snmpget $1 -v2c -c $2 enterprises.4526.18.5.1.3.2 | sed 's/.*ING: "//g' | sed 's/"//g'`
		if [ $SYSTEMPOK == "ok" ]; then
		  intReturn=$STATE_OK
		else
		  intReturn=$STATE_WARNING
		fi	
		outMessage="$SYSTEMPOK: $SYSTEMP°F | 'System °F'=$SYSTEMP;130;149"
	;;	

	*)
		intReturn=$STATE_OK
		outMessage="  Usage: $0 IPADDRESS SNMPCOMMUNITY STATUS \n \n  Available statuses are: \n\n    disk1|disk2|disk3|disk4|proc|sys"

	;;
esac


echo -e $outMessage
exit $intReturn
